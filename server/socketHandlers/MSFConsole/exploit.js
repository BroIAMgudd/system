const { getModuleBy } = require('../Functions/msfReq');
const { findSystem } = require('../Functions/System');
const { findUser } = require('../helper');
const pool = require('../mysqlPool');

module.exports = function (socket, usersOnline, io) {
  socket.on('exploit', async (data) => {
    const user = findUser(usersOnline, 'id', socket.id);
    if (!user) {
      socket.disconnect();
      return;
    }

    const { host, port, exploitID, payloadID } = data;

    try {
      const { username } = user;
      const conn = await pool.getConnection();

      try {
        const [exploitQuery] = await getModuleBy(conn, username, { search: 'id', info: exploitID });
        const [payloadQuery] = await getModuleBy(conn, username, { search: 'id', info: payloadID });

        if (exploitQuery.length === 0 || payloadQuery.length === 0) {
          socket.emit('msfprint', { msg: 'Module (exploit or payload) with specified ID not found' });
          return;
        }

        const exploit = exploitQuery[0];
        const payload = payloadQuery[0];

        const targetSys = await findSystem(conn, 'ip', host);
        if (!targetSys) {
          socket.emit('print', { msg: 'Target user changed IP' });
          return;
        }

        const portQuery = await getPorts(conn, targetSys.username, port);
        const selectedPort = portQuery.length > 0 ? portQuery[0] : null;

        if (!selectedPort || exploit.service !== selectedPort.service || payload.service !== selectedPort.service) {
          socket.emit('msfprint', { msg: 'Exploit or payload service is incorrect for the specified port' });
          return;
        }

        // Update port to mark it as vulnerable and associate it with the payload
        await setPortVuln(conn, targetSys.username, selectedPort.number, payload.name);

        socket.emit('msfprint', { msg: `PORT ${selectedPort.number} COMPROMISED ${exploit.name} AND ${payload.name} INJECTED` });
      } finally {
        conn.release();
      }
    } catch (err) {
      throw err;
    }
  });
};

async function getPorts(conn, username, portNumber) {
  const query = 'SELECT * FROM ports WHERE username = ? AND number = ?';
  const [rows] = await conn.query(query, [username, portNumber]);
  return rows;
}

async function setPortVuln(conn, targetUser, portNumber, payloadName) {
  const query = 'UPDATE ports SET vulnerable = true, payload = ? WHERE username = ? AND number = ?';
  await conn.query(query, [payloadName, targetUser, portNumber]);
}
